/*
 * This file is auto-generated by PetaLinux SDK 
 * DO NOT MODIFY this file, the modification will not persist
 */

#ifndef __PLNX_CONFIG_H
#define __PLNX_CONFIG_H

/* The following table includes the supported baudrates */
#define CONFIG_SYS_BAUDRATE_TABLE  {9600, 19200, 38400, 57600, 115200, 230400}

/* use serial multi for all serial devices */
#define CONFIG_SERIAL_MULTI
#define CONFIG_SYS_CONSOLE_IS_IN_ENV 1

/* Board name */

/* processor - microblaze_0 */
#define XILINX_USE_MSR_INSTR	1
#define XILINX_USE_ICACHE	1
#define XILINX_USE_DCACHE	1
#define XILINX_DCACHE_BYTE_SIZE	32768
#define XILINX_PVR	2
#define MICROBLAZE_V5
#define CONFIG_CMD_IRQ
#define CONFIG_DCACHE
#define CONFIG_ICACHE

/* main_memory - mig_7series_0 */

/* Memory testing handling */
#define CONFIG_SYS_MEMTEST_START	0x80000000
#define CONFIG_SYS_MEMTEST_END	(0x80000000 + 0x1000)
#define CONFIG_SYS_LOAD_ADDR	0x80000000 /* default load address */

/* global pointer options */
#define CONFIG_SYS_GBL_DATA_OFFSET	(0x10000000 - GENERATED_GBL_DATA_SIZE)

/* Size of malloc() pool */
#define SIZE	0x100000
#define CONFIG_SYS_MALLOC_LEN	SIZE
#define CONFIG_SYS_MONITOR_LEN	SIZE
#define CONFIG_SYS_MONITOR_BASE	(0x80000000 + CONFIG_SYS_GBL_DATA_OFFSET - CONFIG_SYS_MONITOR_LEN - GENERATED_BD_INFO_SIZE)
#define CONFIG_SYS_MALLOC_BASE	(CONFIG_SYS_MONITOR_BASE - CONFIG_SYS_MALLOC_LEN)

/* stack */
#define CONFIG_SYS_INIT_SP_OFFSET	(CONFIG_SYS_TEXT_BASE - CONFIG_SYS_MALLOC_F_LEN)

/* No of_control support yet*/

/* uartlite - axi_uartlite_0 */
#define XILINX_UARTLITE_BASEADDR	0x40600000
#define CONFIG_BAUDRATE	115200
#define TTYUL0	"ttyUL0=setenv stdout ttyUL0;setenv stdin ttyUL0\0"
#define SERIAL_MULTI	"serial=setenv stdout serial;setenv stdin serial\0" "stdin=ttyUL0\0" "stdout=ttyUL0\0"
#define CONSOLE_ARG "console=console=ttyUL0,115200\0"
#define SERIAL_MULTI	"serial=setenv stdout serial;setenv stdin serial\0" "stdin=ttyUL0\0" "stdout=ttyUL0\0"
#define CONSOLE_ARG "console=console=ttyUL0,115200\0"

/* spi_flash - axi_quad_spi_0 */
#define XILINX_SPI_FLASH_BASEADDR	0x44A00000
#define XILINX_SPI_FLASH_HIGHADDR	0x44A0FFFF
#define XILINX_SPI_FLASH_SCK_RATIO	2
#define XILINX_SPI_FLASH_MAX_FREQ	(XILINX_SPI_FLASH_ACLK / XILINX_SPI_FLASH_SCK_RATIO)
#define CONFIG_SYS_SPI_BASE	XILINX_SPI_FLASH_BASEADDR
#define CONFIG_ENV_SPI_MAX_HZ	XILINX_SPI_FLASH_MAX_FREQ
#define CONFIG_SYS_NO_FLASH
#define XILINX_SPI_FLASH_ACLK	100000000
#define XILINX_SPI_FLASH_CS	0
#define CONFIG_ENV_IS_IN_SPI_FLASH
#define CONFIG_ENV_OFFSET	0x200000
#define CONFIG_ENV_SIZE	0x20000
#define CONFIG_ENV_SECT_SIZE	0x20000

/* timer - axi_timer_0 */

/* intc - microblaze_0_axi_intc */

/* FPGA */

/* Make the BOOTM LEN big enough for the compressed image */
#define CONFIG_SYS_BOOTM_LEN 0x4000000


/* BOOTP options */
#define CONFIG_BOOTP_SERVERIP
#define CONFIG_BOOTP_BOOTFILESIZE
#define CONFIG_BOOTP_BOOTPATH
#define CONFIG_BOOTP_GATEWAY
#define CONFIG_BOOTP_HOSTNAME

/*Command line configuration.*/
#define CONFIG_CMDLINE_EDITING
#define CONFIG_CMD_SAVES

/* Miscellaneous configurable options */
#define CONFIG_SYS_CBSIZE	2048/* Console I/O Buffer Size      */
#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)

/* Boot Argument Buffer Size */
#define CONFIG_SYS_MAXARGS	32	/* max number of command args */
#define CONFIG_SYS_LONGHELP

/* architecture dependent code */
#define CONFIG_SYS_USR_EXCEP	/* user exception */
#define CONFIG_SYS_HZ	1000

/* Use the HUSH parser */
#define CONFIG_SYS_PROMPT_HUSH_PS2 "> "

/* Don't define BOOTARGS, we get it from the DTB chosen fragment */
#undef CONFIG_BOOTARGS

#define CONFIG_ENV_OVERWRITE	/* Allow to overwrite the u-boot environment variables */

#define CONFIG_LMB

/* Initial memory map for Linux */
#define CONFIG_SYS_BOOTMAPSZ 0x8000000

/* PREBOOT */
#define CONFIG_PREBOOT	"echo U-BOOT for Arty-S7-50;setenv preboot; echo; "

/* Extra U-Boot Env settings */
#define CONFIG_EXTRA_ENV_SETTINGS \
	SERIAL_MULTI \ 
	CONSOLE_ARG \ 
	TTYUL0 \ 
	"autoload=no\0" \ 
	"clobstart=0x81000000\0" \ 
	"netstart=0x81000000\0" \ 
	"dtbnetstart=0x82800000\0" \ 
	"loadaddr=0x81000000\0" \ 
	"bootsize=0x80000\0" \ 
	"bootstart=0x180000\0" \ 
	"boot_img=u-boot-s.bin\0" \ 
	"install_boot=sf probe 0 && sf erase ${bootstart} ${bootsize} && " \ 
		"sf write ${clobstart} ${bootstart} ${filesize}\0" \ 
	"bootenvsize=0x20000\0" \ 
	"bootenvstart=0x200000\0" \ 
	"eraseenv=sf probe 0 && sf erase ${bootenvstart} ${bootenvsize}\0" \ 
	"jffs2_img=rootfs.jffs2\0" \ 
	"install_jffs2=sf probe 0 && sf erase ${jffs2start} ${jffs2size} && " \ 
		"sf write ${clobstart} ${jffs2start} ${filesize}\0" \ 
	"kernelsize=0xd00000\0" \ 
	"kernelstart=0x220000\0" \ 
	"kernel_img=image.ub\0" \ 
	"install_kernel=sf probe 0 && sf erase ${kernelstart} ${kernelsize} && " \ 
		"sf write ${clobstart} ${kernelstart} ${filesize}\0" \ 
	"cp_kernel2ram=sf probe 0 && sf read ${netstart} ${kernelstart} ${kernelsize}\0" \ 
	"dtb_img=system.dtb\0" \ 
	"fault=echo ${img} image size is greater than allocated place - partition ${img} is NOT UPDATED\0" \ 
	"test_crc=if imi ${clobstart}; then run test_img; else echo ${img} Bad CRC - ${img} is NOT UPDATED; fi\0" \ 
	"test_img=setenv var \"if test ${filesize} -gt ${psize}\\; then run fault\\; else run ${installcmd}\\; fi\"; run var; setenv var\0" \ 
	"default_bootcmd=run cp_kernel2ram && bootm ${netstart}\0" \ 
""

/* BOOTCOMMAND */
#define CONFIG_BOOTCOMMAND	"run default_bootcmd"

#endif /* __PLNX_CONFIG_H */
